import json

# Function to remove empty strings from frames
def remove_empty_strings(frames):
    return [frame if not isinstance(frame, list) else [item for item in frame if item != ''] for frame in frames]

# I hate my fucking life
def lowercase_every_second_letter(frames, char_array):
    lowercase_flags = {char: False for char in char_array}
    for frame in frames:
        if isinstance(frame, list):
            for i in range(len(frame)):
                if isinstance(frame[i], str):
                    for char in char_array:
                        if i == 2 and frame[i].upper().count(char) % 2 == 1:
                            frame[i] = "".join(c.lower() if (c == char.upper() and lowercase_flags[char]) else c for c in frame[i])
                            lowercase_flags[char] = not lowercase_flags[char]
                        else:
                            frame[i] = "".join(c.upper() if c == char.lower() else c for c in frame[i])
    return frames



#Paste the json here (for now only suppots one location at a time)
input_json = {
  "map": "de_overpass",
  "from": "Tunnel",
  "to": "Ledge",
  "type": "movement",
  "weapon": "weapon_knife",
  "x": -1592.0012207031,
  "y": -1964.4926757813,
  "z": 96.03125,
  "pitch": 4.5894002914429,
  "yaw": -177.68397521973,
  "viewAnglesDistanceMax": 0.12,
  "data": [[0,0,"F"],[-0.020140171051025],1,[-0.040280342102051],[-0.020140171051025],17,[-0.020140171051025],[-0.060420513153076],[-0.060420513153076],[-0.14098119735718,0.0201416015625],[-0.20139980316162,0.0201416015625],[-0.30209970474243,0.040283203125],[-0.50349974632263,0.0604248046875],[-0.64447951316833,0.0604248046875],[-0.84587967395782,0.08056640625],[-1.2486792504787,0.08056640625],[-1.2486793100834,0.0201416015625],[-1.4500790834427],[-1.9737191200256,0.0201416015625],[-1.3292388916016,0.0201416015625],[-2.235538482666,0.1007080078125],[-1.9938583374023,0.1007080078125],[-2.6383380889893,0.08056640625],[-2.7390384674072,0.0201416015625],[-2.4167985916138,-0.1409912109375],[-2.8800182342529,-0.3021240234375],[-3.2425384521484,-0.4632568359375],[-2.2556781768799,-0.362548828125],[-2.7390384674072,-0.362548828125],[-2.6383380889893,-0.281982421875],[-2.6181983947754,-0.24169921875],[-2.2556838989258,-0.201416015625],[-1.5306396484375,-0.120849609375],[-1.6313362121582,-0.201416015625],[-0.92643737792969,-0.201416015625],[-0.34238433837891,-0.0604248046875],3,[0,0,"D"],20,[-0.74517822265625,359.5569152832],[-1.0674209594727,-0.62434387207031],[-1.2688217163086,-0.60418701171875],[-1.6514778137207,-0.66459655761719],[-1.2688179016113,-0.44306945800781],[-1.7521820068359,-0.52365112304688],[-1.4299430847168,-0.362548828125],[-1.55078125,-0.322265625],[-1.2889518737793,-0.2215576171875],[-1.3091011047363,-0.2215576171875],[-1.1076927185059,-0.1812744140625],[-0.90629959106445,-0.1409912109375],[-0.92643737792969,-0.1409912109375],[-0.62433242797852,-0.120849609375],[-0.58405685424805,-0.1409912109375],[-0.46321868896484,-0.1611328125],[-0.40279388427734,-0.201416015625],[-0.22154235839844,-0.1409912109375],[-0.0604248046875,-0.040283203125],37,[0.040283203125,0.0201416015625],[0.08056640625,0.08056640625],[0.08056640625,0.08056640625],[0.1007080078125,0.0604248046875],[0.1007080078125,0.040283203125],[0.08056640625,0.040283203125],[0.1007080078125,0.040283203125],[0.08056640625,0.0201416015625],[0.0604248046875,0.0201416015625],[0.0604248046875,0.0201416015625],[0.040283203125],[0.0201416015625],[0.0201416015625,0.0201416015625],[0.0201416015625],[0.0201416015625],[0.0201416015625,0.0201416015625],[0.0201416015625],1,[0.0201416015625],[0.0201416015625],[0.040283203125,0.0201416015625],[0.040283203125],[0.040283203125],[0.040283203125],[0.040283203125],[0.0201416015625],[0.040283203125],[0.0201416015625],[0.040283203125],[0.0201416015625,-0.0201416015625],[0.0201416015625],[0.0201416015625],[0.0201416015625,-0.0201416015625],[0.040283203125],[0.0201416015625,-0.0201416015625],[0.040283203125,-0.0201416015625],[0.040283203125,-0.0201416015625],[0.08056640625,-0.040283203125],[0.08056640625,-0.0604248046875],[0.1007080078125,-0.0604248046875,"","F"],[0.14098739624023,-0.0201416015625],[0.0604248046875],15,[2.2556838989258,-0.90629577636719],[3.3029594421387,-2.7591705322266],[5.8003158569336,-7.2101135253906],[6.021858215332,-9.7678985595703],[7.5323600769043,-14.077850341797],[8.0761337280273,-17.179412841797],[7.5726375579834,-18.347534179688],[6.4246559143066,-17.823883056641],[5.8607363700867,-21.851890563965],[4.612057030201,-20.623344421387],[2.8598780035973,-14.802888870239],[2.4772188663483,-14.621631622314],[1.3493795394897,-8.8414535522461],[1.0472798347473,-6.6663358211517],[0.40279960632324,-1.7320387363434],19,[-0.040280342102051],[-0.18125915527344,0.12083959579468],[-0.040279388427734,0.20139980316162],[0.1409797668457,0.38265979290009],[0.30210113525391,0.58405959606171],[0.24168109893799,0.48335975408554],[0.28196144104004,0.56391972303391],[0.28196144104004,0.62433961033821],[0.18126010894775,0.42293974757195],[0.12083911895752,0.28195989131927],[0.060419082641602,0.12083983421326],[0,0.020139932632446],2,[0.020139694213867,0,"J"],[0,0,"","J"],3,[0,0.020139932632446],1,[0,0.020139932632446],6,[-0.020139694213867],[-0.020139694213867],[-0.020139694213867],[-0.040279388427734,0.020139932632446],[-0.020139694213867],[-0.020139694213867,-0.020139932632446],24,[0,0,"F"],48]
}

letter_array = ["A", "J", "D", "F", "L", "R", "B", "U", "Z", "S"]
input_json["data"] = remove_empty_strings(input_json["data"])
input_json["data"] = lowercase_every_second_letter(input_json["data"], letter_array)

# Create new JSON with modified data array
new_json = {
    "name": [input_json["from"], input_json["to"]],
    "weapon": input_json["weapon"],
    "position": [input_json["x"], input_json["y"], input_json["z"]],
    "viewangles": [input_json["pitch"], input_json["yaw"]],
    "movement": {
        "frames": input_json["data"]
    }
}

# Convert new JSON to string and print
output_json = json.dumps(new_json, separators=(',', ':'))
print(output_json)
